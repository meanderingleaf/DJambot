generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Jam {
  id              Int      @id @default(autoincrement())
  server          String  @default("noserver")
  name            String
  startTime       DateTime @default(now())
  currentCritStep Int
  critiqueSteps   CritiqueStep[]
}

model User {
  id              Int    @id @default(autoincrement())
  name            String
  critiqueStage   Int    @default(0)
  settingGoal     Boolean @default(false)
  uploadingImage  Boolean @default(false)
  summarizing     Boolean @default(false)
  discordThread   String?
  goals           Goal[]
  grams           Gram[]
  gramVids        GramVid[]
  critSummary     CritSummary[]
  critGroup       UsersInCritgroups[]
  CritMessages    CritMessage[]
  userId          BigInt @unique
}

model Team {
  id              Int                   @id @default(autoincrement())
  name            String
  discordThread   String?
  currentCritique CritiqueStepInstance?
}

model Gram {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  userId      Int          @unique
  user        User         @relation(fields: [userId], references: [id])
}

model CritiqueStep {
  id        Int                   @id @default(autoincrement())
  order     Int
  stage     Int
  name      String
  time      DateTime
  video     CritVideo[]
  jamId     Int                   
  jam       Jam                   @relation(fields: [jamId], references: [id])
  prompts   CritiquePrompt[]
  gramVids  GramVid[]
  goals     Goal[]
  critSummary CritSummary[]
  CritMessage CritMessage[]
  instances CritiqueStepInstance?
}


model Project {
    id             Int          @id @default(autoincrement())
    name          String
}

//this is the prompt the bot goes through to get people to respond and think
//about what they have done
model CritiquePrompt {
  id             Int          @id @default(autoincrement())
  text           String 
  critiqueStepId Int
  critiqueStep   CritiqueStep @relation(fields: [critiqueStepId], references: [id])
}

//These are the videos that users have uploaded to the site
model GramVid {
  id          Int         @id @default(autoincrement())
  time        DateTime    @default(now())
  path        String
  gramPath    String      @default("-")
  critMessages  CritMessage[]     
  critStepId  Int         
  critStep    CritiqueStep @relation(fields: [critStepId], references: [id])
  userId      Int          
  user        User         @relation(fields: [userId], references: [id])
}

model CritiqueStepInstance {
  teamId     Int          @unique
  critStepId Int          @unique
  critStep   CritiqueStep @relation(fields: [critStepId], references: [id])
  team       Team         @relation(fields: [teamId], references: [id])
}

model CritMessage {
  id          Int           @id @default(autoincrement())
  time        DateTime      @default(now())
  sender      String
  message     String
  gramVidID  Int
  gramVid     GramVid       @relation(fields: [gramVidID], references: [id])
  critStepId  Int          
  critStep    CritiqueStep  @relation(fields: [critStepId], references: [id])
  userId      Int          
  user        User          @relation(fields: [userId], references: [id])   
}

model CritVideo {
  id          Int @id @default(autoincrement())
  path        String
  critStepId  Int          @unique
  critStep    CritiqueStep @relation(fields: [critStepId], references: [id])
}

model Goal {
  id            Int @id @default(autoincrement())
  description   String
  userId      Int          
  user        User         @relation(fields: [userId], references: [id])
  critStepId Int          
  critStep   CritiqueStep @relation(fields: [critStepId], references: [id])
}

model CritSummary {
  id            Int @id @default(autoincrement())
  description   String
  userId      Int          
  user        User         @relation(fields: [userId], references: [id])
  critStepId Int          
  critStep   CritiqueStep @relation(fields: [critStepId], references: [id])
}

model CritGroup {
  id          Int @id @default(autoincrement())         
  users       UsersInCritgroups[]  
}

model UsersInCritgroups {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int // relation scalar field (used in the `@relation` attribute above)
  critGroup   CritGroup @relation(fields: [critGroupId], references: [id])
  critGroupId Int // relation scalar field (used in the `@relation` attribute above)

  @@id([userId, critGroupId])
}